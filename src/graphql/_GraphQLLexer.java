/* The following code was generated by JFlex 1.4.3 on 11/15/15 1:56 PM */

package graphql;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static graphql.GraphQLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/15/15 1:56 PM from the specification file
 * <tt>C:/Users/Gregor/code/graphql-intellij-plugin/src/graphql/GraphQLLexer.flex</tt>
 */
public class _GraphQLLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\0\1\1\1\1\22\0\1\1\1\24\1\2"+
    "\1\0\1\23\3\0\1\16\1\17\1\0\1\3\1\11\1\3\1\46"+
    "\1\0\12\7\1\12\2\0\1\13\2\0\1\22\32\10\1\20\1\0"+
    "\1\21\1\0\1\6\1\0\1\35\1\10\1\36\1\10\1\30\1\34"+
    "\1\45\1\10\1\31\2\10\1\41\1\40\1\32\1\44\1\27\1\43"+
    "\1\33\1\42\1\25\1\37\3\10\1\26\1\10\1\14\1\0\1\15"+
    "\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"+
    "\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5"+
    "\201\0\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\10\0\236\5"+
    "\11\0\46\5\2\0\1\5\7\0\47\5\110\0\33\5\5\0\3\5"+
    "\55\0\53\5\25\0\12\4\4\0\2\5\1\0\143\5\1\0\1\5"+
    "\17\0\2\5\7\0\2\5\12\4\3\5\2\0\1\5\20\0\1\5"+
    "\1\0\36\5\35\0\131\5\13\0\1\5\16\0\12\4\41\5\11\0"+
    "\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0\1\5\3\0"+
    "\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0\66\5\3\0"+
    "\1\5\22\0\1\5\7\0\12\5\4\0\12\4\1\0\7\5\1\0"+
    "\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0"+
    "\3\5\4\0\12\4\2\5\23\0\6\5\4\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0\4\5"+
    "\1\0\1\5\7\0\12\4\2\0\3\5\20\0\11\5\1\0\3\5"+
    "\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\22\0\1\5\17\0\2\5\4\0\12\4\25\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0\1\5"+
    "\36\0\2\5\1\0\3\5\4\0\12\4\1\0\1\5\21\0\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\26\0\1\5"+
    "\25\0\12\4\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5\4\0\12\4"+
    "\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\4\1\0\2\5"+
    "\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\20\0\1\5"+
    "\21\0\2\5\4\0\12\4\12\0\6\5\5\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0\2\5"+
    "\14\0\7\5\11\0\12\4\47\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0\2\5"+
    "\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\4\2\0\4\5"+
    "\40\0\1\5\37\0\12\4\26\0\10\5\1\0\44\5\33\0\5\5"+
    "\163\0\53\5\24\0\1\5\12\4\6\0\6\5\4\0\4\5\3\0"+
    "\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\1\0"+
    "\12\4\6\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0"+
    "\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0"+
    "\103\5\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0"+
    "\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5\16\0"+
    "\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5\4\0"+
    "\1\5\3\0\12\4\46\0\12\4\6\0\130\5\10\0\51\5\1\0"+
    "\1\5\5\0\106\5\12\0\35\5\51\0\12\4\36\5\2\0\5\5"+
    "\13\0\54\5\25\0\7\5\10\0\12\4\46\0\27\5\11\0\65\5"+
    "\53\0\12\4\6\0\12\4\15\0\1\5\135\0\57\5\21\0\7\5"+
    "\4\0\12\4\51\0\36\5\15\0\2\5\12\4\54\5\32\0\44\5"+
    "\34\0\12\4\3\0\3\5\12\4\44\5\153\0\4\5\1\0\4\5"+
    "\3\0\2\5\11\0\300\5\100\0\u0116\5\2\0\6\5\2\0\46\5"+
    "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"+
    "\1\0\7\5\164\0\1\5\15\0\1\5\20\0\15\5\145\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\64\0\2\5\u0a7b\0\57\5\1\0\57\5"+
    "\1\0\205\5\6\0\4\5\3\0\2\5\14\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\70\5\7\0\1\5\20\0\27\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\120\0\1\5\u01d5\0\2\5\52\0\5\5"+
    "\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5"+
    "\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5"+
    "\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5"+
    "\12\4\2\5\24\0\57\5\20\0\31\5\10\0\106\5\61\0\11\5"+
    "\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0\12\5"+
    "\1\0\3\5\1\0\4\5\1\0\27\5\35\0\64\5\16\0\62\5"+
    "\34\0\12\4\30\0\6\5\3\0\1\5\4\0\12\4\34\5\12\0"+
    "\27\5\31\0\35\5\7\0\57\5\34\0\1\5\12\4\46\0\51\5"+
    "\27\0\3\5\1\0\10\5\4\0\12\4\6\0\27\5\3\0\1\5"+
    "\5\0\60\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0\1\5"+
    "\1\0\1\5\30\0\3\5\2\0\13\5\7\0\3\5\14\0\6\5"+
    "\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0\43\5"+
    "\15\0\12\4\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\0\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5"+
    "\164\0\5\5\1\0\207\5\23\0\12\4\7\0\32\5\6\0\32\5"+
    "\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\2\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\6\4\1\2\1\0\1\21\10\4\1\22"+
    "\1\0\11\4\1\23\1\24\1\25\10\4\1\26\2\4"+
    "\1\27\1\4\1\30\12\4\1\31\1\32\1\33\1\4"+
    "\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\47\0\47"+
    "\0\47\0\47\0\47\0\47\0\47\0\47\0\47\0\47"+
    "\0\47\0\47\0\352\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad"+
    "\0\u01d4\0\165\0\47\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297"+
    "\0\u02be\0\u02e5\0\u030c\0\303\0\u0333\0\u035a\0\u0381\0\u03a8"+
    "\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\47\0\303"+
    "\0\303\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3"+
    "\0\u05ca\0\303\0\u05f1\0\u0618\0\303\0\u063f\0\303\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e"+
    "\0\u07c5\0\303\0\303\0\303\0\u07ec\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\3\6\1\24\2\6"+
    "\1\25\3\6\1\26\2\6\1\27\1\30\1\6\1\31"+
    "\50\0\1\3\45\0\2\32\1\33\44\32\4\0\1\5"+
    "\2\0\1\5\45\0\3\6\14\0\21\6\7\0\3\6"+
    "\14\0\1\6\1\34\4\6\1\35\12\6\7\0\3\6"+
    "\14\0\5\6\1\36\5\6\1\37\5\6\7\0\3\6"+
    "\14\0\6\6\1\40\1\6\1\41\10\6\7\0\3\6"+
    "\14\0\12\6\1\42\6\6\7\0\3\6\14\0\12\6"+
    "\1\43\6\6\7\0\3\6\14\0\5\6\1\44\13\6"+
    "\47\0\1\45\6\0\3\6\14\0\2\6\1\46\16\6"+
    "\7\0\3\6\14\0\12\6\1\47\6\6\7\0\3\6"+
    "\14\0\1\50\1\6\1\51\16\6\7\0\3\6\14\0"+
    "\2\6\1\52\16\6\7\0\3\6\14\0\10\6\1\53"+
    "\10\6\7\0\3\6\14\0\14\6\1\54\4\6\7\0"+
    "\3\6\14\0\1\55\20\6\7\0\3\6\14\0\3\6"+
    "\1\56\15\6\47\0\1\57\6\0\3\6\14\0\3\6"+
    "\1\60\15\6\7\0\3\6\14\0\3\6\1\61\15\6"+
    "\7\0\3\6\14\0\3\6\1\62\15\6\7\0\3\6"+
    "\14\0\12\6\1\63\6\6\7\0\3\6\14\0\14\6"+
    "\1\64\4\6\7\0\3\6\14\0\20\6\1\65\7\0"+
    "\3\6\14\0\15\6\1\66\3\6\7\0\3\6\14\0"+
    "\10\6\1\67\10\6\7\0\3\6\14\0\6\6\1\70"+
    "\12\6\7\0\3\6\14\0\6\6\1\71\12\6\7\0"+
    "\3\6\14\0\1\72\20\6\7\0\3\6\14\0\3\6"+
    "\1\73\15\6\7\0\3\6\14\0\13\6\1\74\5\6"+
    "\7\0\3\6\14\0\3\6\1\75\15\6\7\0\3\6"+
    "\14\0\1\76\20\6\7\0\3\6\14\0\1\6\1\77"+
    "\17\6\7\0\3\6\14\0\7\6\1\100\11\6\7\0"+
    "\3\6\14\0\13\6\1\101\5\6\7\0\3\6\14\0"+
    "\3\6\1\102\15\6\7\0\3\6\14\0\4\6\1\103"+
    "\14\6\7\0\3\6\14\0\10\6\1\104\10\6\7\0"+
    "\3\6\14\0\3\6\1\105\15\6\7\0\3\6\14\0"+
    "\5\6\1\106\13\6\7\0\3\6\14\0\17\6\1\107"+
    "\1\6\7\0\3\6\14\0\11\6\1\110\7\6\7\0"+
    "\3\6\14\0\5\6\1\111\13\6\7\0\3\6\14\0"+
    "\1\112\20\6\7\0\3\6\14\0\5\6\1\113\13\6"+
    "\7\0\3\6\14\0\3\6\1\114\15\6\7\0\3\6"+
    "\14\0\1\115\20\6\7\0\3\6\14\0\15\6\1\116"+
    "\3\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2067];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\14\11\7\1\1\0\1\11\11\1"+
    "\1\0\11\1\1\11\37\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[78];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _GraphQLLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GraphQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1702) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return MUTATION;
          }
        case 29: break;
        case 5: 
          { return COMMA;
          }
        case 30: break;
        case 16: 
          { return BANG;
          }
        case 31: break;
        case 20: 
          { return TYPE;
          }
        case 32: break;
        case 18: 
          { return ON;
          }
        case 33: break;
        case 25: 
          { return FRAGMENT;
          }
        case 34: break;
        case 24: 
          { return QUERY;
          }
        case 35: break;
        case 8: 
          { return BRACE1;
          }
        case 36: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 37: break;
        case 11: 
          { return PAREN2;
          }
        case 38: break;
        case 13: 
          { return BRACKET2;
          }
        case 39: break;
        case 23: 
          { return FALSE;
          }
        case 40: break;
        case 28: 
          { return IMPLEMENTS;
          }
        case 41: break;
        case 7: 
          { return EQUALS;
          }
        case 42: break;
        case 15: 
          { return DOLLAR;
          }
        case 43: break;
        case 6: 
          { return COLON;
          }
        case 44: break;
        case 19: 
          { return SPREAD;
          }
        case 45: break;
        case 4: 
          { return ID;
          }
        case 46: break;
        case 14: 
          { return AT;
          }
        case 47: break;
        case 22: 
          { return INPUT;
          }
        case 48: break;
        case 9: 
          { return BRACE2;
          }
        case 49: break;
        case 27: 
          { return INTERFACE;
          }
        case 50: break;
        case 17: 
          { return STRING;
          }
        case 51: break;
        case 1: 
          { return NUMBER;
          }
        case 52: break;
        case 21: 
          { return TRUE;
          }
        case 53: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 54: break;
        case 12: 
          { return BRACKET1;
          }
        case 55: break;
        case 10: 
          { return PAREN1;
          }
        case 56: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
