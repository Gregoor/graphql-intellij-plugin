{
  parserClass="graphql.GraphQLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="GraphQL"
  psiImplClassSuffix="Impl"
  psiPackage="graphql"
  psiImplPackage="graphql.impl"

  elementTypeHolderClass="graphql.GraphQLTypes"
  elementTypeClass="graphql.GraphQLElementType"
  tokenTypeClass="graphql.GraphQLTokenType"

  tokens = [
    STRING="regexp:\"[^\"]*\""
    NUMBER="regexp:(\+|\-)?\p{Digit}*"
    ID="regexp:\p{Alpha}\w*"

    COMMA=","
    COLON=":"
    EQUALS="="
    BRACE1="{"
    BRACE2="}"
    PAREN1="("
    PAREN2=")"
    BRACKET1="["
    BRACKET2="]"
    AT="@"
    DOLLAR="$"
    BANG="!"

    TYPE="type"
    INTERFACE="interface"
    INPUT="input"
    IMPLEMENTS="implements"
    QUERY="query"
    MUTATION="mutation"
    FRAGMENT="fragment"
    SPREAD="..."
    ON="on"
    TRUE="true"
    FALSE="false"
  ]
}

graphqlFile ::= definition*

keywords ::= 'type' | 'interface' | 'input' | 'query' | 'mutation'

definition ::= type_definition | operation_definition | fragment_definition

type_definition ::= ('type' | 'interface' | 'input') named_type interfaces?
  field_definitions {pin=1}
interfaces ::= 'implements' named_type {pin=1}
field_definitions ::= '{' field_definition (','? field_definition)* ','? '}'
  {pin=1}
field_definition ::= field_name argument_definitions? ':' type_ref {pin=1}
argument_definitions ::= '(' argument_definition (','? argument_definition)*
  ','? ')' {pin=1}
argument_definition ::= argument_name ':' type_ref {pin=1}

operation_definition ::=  selection_set |
  operation_type operation_name? variable_definitions? directive? selection_set
  {pin(".*")=1}
operation_name ::= ID
operation_type ::= 'query' | 'mutation'

selection_set ::= '{' selection (','? selection)* ','? '}' {pin=1}
selection ::= field | fragment_spread | inline_fragment
field ::= alias? field_name arguments? directives? selection_set? {pin=2}
field_name ::= (keywords | ID)

arguments ::= '(' argument (','? argument)* ','? ')' {pin=1}
argument ::= argument_name ':' argument_value {pin=2}
argument_name ::= (keywords | ID)
argument_value ::= value

alias ::= alias_name ':'
alias_name ::= ID

fragment_spread ::= '...' fragment_name directives?
fragment_definition ::= 'fragment' fragment_name? type_condition directives?
  selection_set
fragment_name ::= ID
inline_fragment ::= '...' type_condition? directives? selection_set

type_condition ::= 'on' named_type

value ::= variable | NUMBER | string_value |
  boolean_value | enum_value | list_value | object_value
string_value ::= STRING
boolean_value ::= 'true' | 'false'
private enum_value ::= STRING
list_value ::= '[' value (','? value)* ','? ']' {pin=1}
object_value ::= '{' object_field* '}'
object_field ::= field_name ':' value

variable_definitions ::= '(' variable_definition (','? variable_definition)* ','? ')'
  {pin=1}
variable_definition ::= variable ':' type_ref default_value? {pin=1}
variable ::= '$' var_name {pin=1}
var_name ::= (keywords | ID)
default_value ::= '=' value

type_ref ::= (list_type | named_type) '!'?
list_type ::= '[' type_ref ']'
named_type ::= ID

directives ::= directive*
directive ::= '@' directive_name arguments?
directive_name ::= ID